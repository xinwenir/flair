/*
 * $Id$
 *
 * Copyright and User License
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Copyright 2006-2019 CERN and INFN
 * 
 *
 * Please consult the LICENSE file for the license 
 *
 * DISCLAIMER
 * ~~~~~~~~~~
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY, OF
 * SATISFACTORY QUALITY, AND FITNESS FOR A PARTICULAR PURPOSE
 * OR USE ARE DISCLAIMED. THE COPYRIGHT HOLDERS AND THE
 * AUTHORS MAKE NO REPRESENTATION THAT THE SOFTWARE AND
 * MODIFICATIONS THEREOF, WILL NOT INFRINGE ANY PATENT,
 * COPYRIGHT, TRADE SECRET OR OTHER PROPRIETARY RIGHT.
 *
 * LIMITATION OF LIABILITY
 * ~~~~~~~~~~~~~~~~~~~~~~~
 * THE COPYRIGHT HOLDERS AND THE AUTHORS SHALL HAVE NO
 * LIABILITY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL,
 * CONSEQUENTIAL, EXEMPLARY, OR PUNITIVE DAMAGES OF ANY
 * CHARACTER INCLUDING, WITHOUT LIMITATION, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES, LOSS OF USE, DATA OR PROFITS,
 * OR BUSINESS INTERRUPTION, HOWEVER CAUSED AND ON ANY THEORY
 * OF CONTRACT, WARRANTY, TORT (INCLUDING NEGLIGENCE), PRODUCT
 * LIABILITY OR OTHERWISE, ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGES.
 *
 * Author:	Vasilis.Vlachoudis@cern.ch
 * BasedOn:	Chris.Theis@cern.ch
 * Date:	Sep-2012
 *
 */

#include <string>
#include <fstream>
#include <iostream>

#include "dxfexport.h"

using namespace std;

static Color32 acadColors[256] = {
		//  B      G     R   A
		{{ 0x00, 0x00, 0x00, 0}},
		{{ 0x00, 0x00, 0xFF, 0}},
		{{ 0x00, 0xFF, 0xFF, 0}},
		{{ 0x00, 0xFF, 0x00, 0}},
		{{ 0xFF, 0xFF, 0x00, 0}},
		{{ 0xFF, 0x00, 0x00, 0}},
		{{ 0xFF, 0x00, 0xFF, 0}},
		{{ 0xFF, 0xFF, 0xFF, 0}},
		{{ 0x41, 0x41, 0x41, 0}},
		{{ 0x80, 0x80, 0x80, 0}},
		{{ 0x00, 0x00, 0xFF, 0}},
		{{ 0xAA, 0xAA, 0xFF, 0}},
		{{ 0x00, 0x00, 0xBD, 0}},
		{{ 0x7E, 0x7E, 0xBD, 0}},
		{{ 0x00, 0x00, 0x81, 0}},
		{{ 0x56, 0x56, 0x81, 0}},
		{{ 0x00, 0x00, 0x68, 0}},
		{{ 0x45, 0x45, 0x68, 0}},
		{{ 0x00, 0x00, 0x4F, 0}},
		{{ 0x35, 0x35, 0x4F, 0}},
		{{ 0x00, 0x3F, 0xFF, 0}},
		{{ 0xAA, 0xBF, 0xFF, 0}},
		{{ 0x00, 0x2E, 0xBD, 0}},
		{{ 0x7E, 0x8D, 0xBD, 0}},
		{{ 0x00, 0x1F, 0x81, 0}},
		{{ 0x56, 0x60, 0x81, 0}},
		{{ 0x00, 0x19, 0x68, 0}},
		{{ 0x45, 0x4E, 0x68, 0}},
		{{ 0x00, 0x13, 0x4F, 0}},
		{{ 0x35, 0x3B, 0x4F, 0}},
		{{ 0x00, 0x7F, 0xFF, 0}},
		{{ 0xAA, 0xD4, 0xFF, 0}},
		{{ 0x00, 0x5E, 0xBD, 0}},
		{{ 0x7E, 0x9D, 0xBD, 0}},
		{{ 0x00, 0x40, 0x81, 0}},
		{{ 0x56, 0x6B, 0x81, 0}},
		{{ 0x00, 0x34, 0x68, 0}},
		{{ 0x45, 0x56, 0x68, 0}},
		{{ 0x00, 0x27, 0x4F, 0}},
		{{ 0x35, 0x42, 0x4F, 0}},
		{{ 0x00, 0xBF, 0xFF, 0}},
		{{ 0xAA, 0xEA, 0xFF, 0}},
		{{ 0x00, 0x8D, 0xBD, 0}},
		{{ 0x7E, 0xAD, 0xBD, 0}},
		{{ 0x00, 0x60, 0x81, 0}},
		{{ 0x56, 0x76, 0x81, 0}},
		{{ 0x00, 0x4E, 0x68, 0}},
		{{ 0x45, 0x5F, 0x68, 0}},
		{{ 0x00, 0x3B, 0x4F, 0}},
		{{ 0x35, 0x49, 0x4F, 0}},
		{{ 0x00, 0xFF, 0xFF, 0}},
		{{ 0xAA, 0xFF, 0xFF, 0}},
		{{ 0x00, 0xBD, 0xBD, 0}},
		{{ 0x7E, 0xBD, 0xBD, 0}},
		{{ 0x00, 0x81, 0x81, 0}},
		{{ 0x56, 0x81, 0x81, 0}},
		{{ 0x00, 0x68, 0x68, 0}},
		{{ 0x45, 0x68, 0x68, 0}},
		{{ 0x00, 0x4F, 0x4F, 0}},
		{{ 0x35, 0x4F, 0x4F, 0}},
		{{ 0x00, 0xFF, 0xBF, 0}},
		{{ 0xAA, 0xFF, 0xEA, 0}},
		{{ 0x00, 0xBD, 0x8D, 0}},
		{{ 0x7E, 0xBD, 0xAD, 0}},
		{{ 0x00, 0x81, 0x60, 0}},
		{{ 0x56, 0x81, 0x76, 0}},
		{{ 0x00, 0x68, 0x4E, 0}},
		{{ 0x45, 0x68, 0x5F, 0}},
		{{ 0x00, 0x4F, 0x3B, 0}},
		{{ 0x35, 0x4F, 0x49, 0}},
		{{ 0x00, 0xFF, 0x7F, 0}},
		{{ 0xAA, 0xFF, 0xD4, 0}},
		{{ 0x00, 0xBD, 0x5E, 0}},
		{{ 0x7E, 0xBD, 0x9D, 0}},
		{{ 0x00, 0x81, 0x40, 0}},
		{{ 0x56, 0x81, 0x6B, 0}},
		{{ 0x00, 0x68, 0x34, 0}},
		{{ 0x45, 0x68, 0x56, 0}},
		{{ 0x00, 0x4F, 0x27, 0}},
		{{ 0x35, 0x4F, 0x42, 0}},
		{{ 0x00, 0xFF, 0x3F, 0}},
		{{ 0xAA, 0xFF, 0xBF, 0}},
		{{ 0x00, 0xBD, 0x2E, 0}},
		{{ 0x7E, 0xBD, 0x8D, 0}},
		{{ 0x00, 0x81, 0x1F, 0}},
		{{ 0x56, 0x81, 0x60, 0}},
		{{ 0x00, 0x68, 0x19, 0}},
		{{ 0x45, 0x68, 0x4E, 0}},
		{{ 0x00, 0x4F, 0x13, 0}},
		{{ 0x35, 0x4F, 0x3B, 0}},
		{{ 0x00, 0xFF, 0x00, 0}},
		{{ 0xAA, 0xFF, 0xAA, 0}},
		{{ 0x00, 0xBD, 0x00, 0}},
		{{ 0x7E, 0xBD, 0x7E, 0}},
		{{ 0x00, 0x81, 0x00, 0}},
		{{ 0x56, 0x81, 0x56, 0}},
		{{ 0x00, 0x68, 0x00, 0}},
		{{ 0x45, 0x68, 0x45, 0}},
		{{ 0x00, 0x4F, 0x00, 0}},
		{{ 0x35, 0x4F, 0x35, 0}},
		{{ 0x3F, 0xFF, 0x00, 0}},
		{{ 0xBF, 0xFF, 0xAA, 0}},
		{{ 0x2E, 0xBD, 0x00, 0}},
		{{ 0x8D, 0xBD, 0x7E, 0}},
		{{ 0x1F, 0x81, 0x00, 0}},
		{{ 0x60, 0x81, 0x56, 0}},
		{{ 0x19, 0x68, 0x00, 0}},
		{{ 0x4E, 0x68, 0x45, 0}},
		{{ 0x13, 0x4F, 0x00, 0}},
		{{ 0x3B, 0x4F, 0x35, 0}},
		{{ 0x7F, 0xFF, 0x00, 0}},
		{{ 0xD4, 0xFF, 0xAA, 0}},
		{{ 0x5E, 0xBD, 0x00, 0}},
		{{ 0x9D, 0xBD, 0x7E, 0}},
		{{ 0x40, 0x81, 0x00, 0}},
		{{ 0x6B, 0x81, 0x56, 0}},
		{{ 0x34, 0x68, 0x00, 0}},
		{{ 0x56, 0x68, 0x45, 0}},
		{{ 0x27, 0x4F, 0x00, 0}},
		{{ 0x42, 0x4F, 0x35, 0}},
		{{ 0xBF, 0xFF, 0x00, 0}},
		{{ 0xEA, 0xFF, 0xAA, 0}},
		{{ 0x8D, 0xBD, 0x00, 0}},
		{{ 0xAD, 0xBD, 0x7E, 0}},
		{{ 0x60, 0x81, 0x00, 0}},
		{{ 0x76, 0x81, 0x56, 0}},
		{{ 0x4E, 0x68, 0x00, 0}},
		{{ 0x5F, 0x68, 0x45, 0}},
		{{ 0x3B, 0x4F, 0x00, 0}},
		{{ 0x49, 0x4F, 0x35, 0}},
		{{ 0xFF, 0xFF, 0x00, 0}},
		{{ 0xFF, 0xFF, 0xAA, 0}},
		{{ 0xBD, 0xBD, 0x00, 0}},
		{{ 0xBD, 0xBD, 0x7E, 0}},
		{{ 0x81, 0x81, 0x00, 0}},
		{{ 0x81, 0x81, 0x56, 0}},
		{{ 0x68, 0x68, 0x00, 0}},
		{{ 0x68, 0x68, 0x45, 0}},
		{{ 0x4F, 0x4F, 0x00, 0}},
		{{ 0x4F, 0x4F, 0x35, 0}},
		{{ 0xFF, 0xBF, 0x00, 0}},
		{{ 0xFF, 0xEA, 0xAA, 0}},
		{{ 0xBD, 0x8D, 0x00, 0}},
		{{ 0xBD, 0xAD, 0x7E, 0}},
		{{ 0x81, 0x60, 0x00, 0}},
		{{ 0x81, 0x76, 0x56, 0}},
		{{ 0x68, 0x4E, 0x00, 0}},
		{{ 0x68, 0x5F, 0x45, 0}},
		{{ 0x4F, 0x3B, 0x00, 0}},
		{{ 0x4F, 0x49, 0x35, 0}},
		{{ 0xFF, 0x7F, 0x00, 0}},
		{{ 0xFF, 0xD4, 0xAA, 0}},
		{{ 0xBD, 0x5E, 0x00, 0}},
		{{ 0xBD, 0x9D, 0x7E, 0}},
		{{ 0x81, 0x40, 0x00, 0}},
		{{ 0x81, 0x6B, 0x56, 0}},
		{{ 0x68, 0x34, 0x00, 0}},
		{{ 0x68, 0x56, 0x45, 0}},
		{{ 0x4F, 0x27, 0x00, 0}},
		{{ 0x4F, 0x42, 0x35, 0}},
		{{ 0xFF, 0x3F, 0x00, 0}},
		{{ 0xFF, 0xBF, 0xAA, 0}},
		{{ 0xBD, 0x2E, 0x00, 0}},
		{{ 0xBD, 0x8D, 0x7E, 0}},
		{{ 0x81, 0x1F, 0x00, 0}},
		{{ 0x81, 0x60, 0x56, 0}},
		{{ 0x68, 0x19, 0x00, 0}},
		{{ 0x68, 0x4E, 0x45, 0}},
		{{ 0x4F, 0x13, 0x00, 0}},
		{{ 0x4F, 0x3B, 0x35, 0}},
		{{ 0xFF, 0x00, 0x00, 0}},
		{{ 0xFF, 0xAA, 0xAA, 0}},
		{{ 0xBD, 0x00, 0x00, 0}},
		{{ 0xBD, 0x7E, 0x7E, 0}},
		{{ 0x81, 0x00, 0x00, 0}},
		{{ 0x81, 0x56, 0x56, 0}},
		{{ 0x68, 0x00, 0x00, 0}},
		{{ 0x68, 0x45, 0x45, 0}},
		{{ 0x4F, 0x00, 0x00, 0}},
		{{ 0x4F, 0x35, 0x35, 0}},
		{{ 0xFF, 0x00, 0x3F, 0}},
		{{ 0xFF, 0xAA, 0xBF, 0}},
		{{ 0xBD, 0x00, 0x2E, 0}},
		{{ 0xBD, 0x7E, 0x8D, 0}},
		{{ 0x81, 0x00, 0x1F, 0}},
		{{ 0x81, 0x56, 0x60, 0}},
		{{ 0x68, 0x00, 0x19, 0}},
		{{ 0x68, 0x45, 0x4E, 0}},
		{{ 0x4F, 0x00, 0x13, 0}},
		{{ 0x4F, 0x35, 0x3B, 0}},
		{{ 0xFF, 0x00, 0x7F, 0}},
		{{ 0xFF, 0xAA, 0xD4, 0}},
		{{ 0xBD, 0x00, 0x5E, 0}},
		{{ 0xBD, 0x7E, 0x9D, 0}},
		{{ 0x81, 0x00, 0x40, 0}},
		{{ 0x81, 0x56, 0x6B, 0}},
		{{ 0x68, 0x00, 0x34, 0}},
		{{ 0x68, 0x45, 0x56, 0}},
		{{ 0x4F, 0x00, 0x27, 0}},
		{{ 0x4F, 0x35, 0x42, 0}},
		{{ 0xFF, 0x00, 0xBF, 0}},
		{{ 0xFF, 0xAA, 0xEA, 0}},
		{{ 0xBD, 0x00, 0x8D, 0}},
		{{ 0xBD, 0x7E, 0xAD, 0}},
		{{ 0x81, 0x00, 0x60, 0}},
		{{ 0x81, 0x56, 0x76, 0}},
		{{ 0x68, 0x00, 0x4E, 0}},
		{{ 0x68, 0x45, 0x5F, 0}},
		{{ 0x4F, 0x00, 0x3B, 0}},
		{{ 0x4F, 0x35, 0x49, 0}},
		{{ 0xFF, 0x00, 0xFF, 0}},
		{{ 0xFF, 0xAA, 0xFF, 0}},
		{{ 0xBD, 0x00, 0xBD, 0}},
		{{ 0xBD, 0x7E, 0xBD, 0}},
		{{ 0x81, 0x00, 0x81, 0}},
		{{ 0x81, 0x56, 0x81, 0}},
		{{ 0x68, 0x00, 0x68, 0}},
		{{ 0x68, 0x45, 0x68, 0}},
		{{ 0x4F, 0x00, 0x4F, 0}},
		{{ 0x4F, 0x35, 0x4F, 0}},
		{{ 0xBF, 0x00, 0xFF, 0}},
		{{ 0xEA, 0xAA, 0xFF, 0}},
		{{ 0x8D, 0x00, 0xBD, 0}},
		{{ 0xAD, 0x7E, 0xBD, 0}},
		{{ 0x60, 0x00, 0x81, 0}},
		{{ 0x76, 0x56, 0x81, 0}},
		{{ 0x4E, 0x00, 0x68, 0}},
		{{ 0x5F, 0x45, 0x68, 0}},
		{{ 0x3B, 0x00, 0x4F, 0}},
		{{ 0x49, 0x35, 0x4F, 0}},
		{{ 0x7F, 0x00, 0xFF, 0}},
		{{ 0xD4, 0xAA, 0xFF, 0}},
		{{ 0x5E, 0x00, 0xBD, 0}},
		{{ 0x9D, 0x7E, 0xBD, 0}},
		{{ 0x40, 0x00, 0x81, 0}},
		{{ 0x6B, 0x56, 0x81, 0}},
		{{ 0x34, 0x00, 0x68, 0}},
		{{ 0x56, 0x45, 0x68, 0}},
		{{ 0x27, 0x00, 0x4F, 0}},
		{{ 0x42, 0x35, 0x4F, 0}},
		{{ 0x3F, 0x00, 0xFF, 0}},
		{{ 0xBF, 0xAA, 0xFF, 0}},
		{{ 0x2E, 0x00, 0xBD, 0}},
		{{ 0x8D, 0x7E, 0xBD, 0}},
		{{ 0x1F, 0x00, 0x81, 0}},
		{{ 0x60, 0x56, 0x81, 0}},
		{{ 0x19, 0x00, 0x68, 0}},
		{{ 0x4E, 0x45, 0x68, 0}},
		{{ 0x13, 0x00, 0x4F, 0}},
		{{ 0x3B, 0x35, 0x4F, 0}},
		{{ 0x33, 0x33, 0x33, 0}},
		{{ 0x50, 0x50, 0x50, 0}},
		{{ 0x69, 0x69, 0x69, 0}},
		{{ 0x82, 0x82, 0x82, 0}},
		{{ 0xBE, 0xBE, 0xBE, 0}},
		{{ 0xFF, 0xFF, 0xFF, 0}}
	};

/* =============================== SVGExport =============================== */
/** writeHeader */
bool DXFExport::writeHeader()
{
	write(999, "flair Vasilis.Vlachoudis@cern.ch");
	write( 0, "SECTION");
	write( 2, "HEADER");
	write( 9, "$ACADVER");
	write( 1, "AC1009");
	write( 9, "$EXTMIN");
	write( 0, 0,0,0);
	write( 9, "$EXTMAX");
	write( 0, 1000,1000,0);
	write( 0, "ENDSEC");
	write( 0,"SECTION");
	write( 2,"ENTITIES");
	return true;
} // writeHeader

/** writeEOF */
bool DXFExport::writeEOF()
{
	write( 0, "ENDSEC");
	write( 0, "EOF");
	return true;
} // writeEOF

/** point */
bool DXFExport::point(double x, double y, dword color, const char* layer)
{
	write(0, "POINT");
	writeLayer(layer);;
	writeColor(color);
	write(0, x, y);
	return true;
} // point

/** line */
bool DXFExport::line(double x1, double y1, double x2, double y2, dword color, const char* layer)
{
	write(0,"LINE");
	writeLayer(layer);;
	writeColor(color);
	write(0, x1, y1);
	write(1, x2, y2);
	return true;
} // line

/** circle */
bool DXFExport::circle(double x, double y, double radius, dword color, const char* layer)
{
	write(0,"CIRCLE");
	writeLayer(layer);;
	writeColor(color);
	write( 0, x, y);
	write(40, radius);
	return true;
} // circle

/** arc */
bool DXFExport::arc(double x, double y, double radius, double startPhi, double endPhi, dword color, const char* layer)
{
	write(0,"ARC");
	writeLayer(layer);;
	writeColor(color);
	write( 0, x, y);
	write(40, radius);
	write(50, DEG(startPhi));
	write(51, DEG(endPhi));
	return true;
} // arc

/** polyline */
bool DXFExport::polyline(Path& path, dword color, const char* layer)
{
	write( 0, "LWPOLYLINE");
	writeLayer(layer);
	writeColor(color);
	write(100,"AcDbEntity");
	write(90, path.count());
//	write(70, flag)	// bit mask flag? 0=default, 1=closed, 128=plinegen
	write(43, 0);	// constant width
	for (int i=0; i<path.count(); i++)
		write(0,path[i].x,path[i].y);
	return true;
} // polyline

/** closestColor */
int DXFExport::closestColor(const dword color)
{
	if (color == _lastColor) return _best;

	Color32 c;
	c.val = color;

	long s2min = 1000000000L;
	for (int i=0; i<(int)SIZE(acadColors); i++) {
		long s2 = (long)Sqr(acadColors[i].rgb.red   - c.rgb.red)   +
		          (long)Sqr(acadColors[i].rgb.green - c.rgb.green) +
		          (long)Sqr(acadColors[i].rgb.blue  - c.rgb.blue);
		if (s2 < s2min) {
			_best = i;
			s2min = s2;
		}
	}
	_lastColor = color;
	return _best;
} // closestColor
