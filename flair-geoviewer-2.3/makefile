#.RECIPEPREFIX = >
# $Id$
#
#                       FLUKA User license
#
#           COPYRIGHT NOTICE AND LICENSE CONDITIONS
#  
#  The copyright in the FLUKA software Version 2011.2x and FLAIR
#  Version 2.3 is entirely vested in INFN and CERN  jointly. The
#  copyright in further versions distributed on www.fluka.org is
#  vested as following:
#  
#  Copyright in developments carried  out  before  September 1st
#  2019 is vested in INFN and CERN jointly.
#  
#  Copyright in developments carried  out   after  September 1st
#  2019 is vested in INFN,  Alberto Fasso`, Alfredo Ferrari  and
#  their collaborators(*).
#  
#  Authorship is detailed for every routine in the source  code.
#  
#  All rights  not  expressly  granted  under  this license  are 
#  reserved.  Requests for permissions not  granted  under  this
#  license shall be addressed to fsc@fluka.org.   Any permission
#  may only be granted in writing.    The FLUKA software results
#  in particular from work performed by Alberto Fasso`,  Alfredo
#  Ferrari, Johannes  Ranft,  Paola Sala  (the "FLUKA Authors"),
#  and collaborators (the "Collaborators").   The Flair user in-
#  terface results in particular from work performed by  Vasilis
#  Vlachoudis  (the "Flair Author") and collaborators  (also the
#  "Collaborators").
#  
#  INFN  is the exclusive source of distribution  of  the  code,
#  bug fixes and documentation  of the  FLUKA  software  version
#  2020.0 and  beyond, (http://www.fluka.org), and may authorise
#  distribution by mirror sites.
#  
#  This license cancels and replaces  any  prior license  condi-
#  tions but their warranty and liability provisions shall  con-
#  tinue to  apply to any use  or  modifications made under such
#  prior license conditions.
#  
#  * Creation date  and  last modification date of each  routine
#    are indicated in the source code
#  
#  DEFINITIONS
#  
#  The FLUKA  software  ("FLUKA")  means  the  fully  integrated
#  particle  physics  Monte Carlo  simulation  software  package
#  being developed since 1989, available from the official FLUKA
#  website  (http://www.fluka.org)  and authorised mirror sites.
#  FLUKA includes FLUKA core code, FLUKA User Routines (as defi-
#  ned below), and the Flair user interface.
#  
#  FLUKA User Routines means the set of subroutines collected in
#  the usermvax  section  of  FLUKA  and  forming  part  of  the
#  standard distribution of FLUKA.
#
#  
#  The Licensee  means  any  person acting individually within a
#  non-profit organisation, exercising any permission granted by
#  this license.
#  
#  LICENSE GRANT
#  
#  1.
#  Subject to the  terms  and  conditions  of this license,  the
#  FLUKA  Copyright  Holders  herewith  grant to the  Licensee a
#  worldwide,  non-exclusive,  royalty-free,  source  and object
#  code  license  to  use  and  reproduce   FLUKA  for  internal
#  scientific non commercial non-military purposes only. 
#  Notwithstanding the foregoing, the Licensee shall not execute
#  FLUKA in a manner that produces an output whose contents  are
#  directly useable or easily employable to simulate the physics
#  models embedded within FLUKA in a generic manner,  or  excise
#  portions of  FLUKA source or object code,  and  execute  them
#  independently of FLUKA.  Extracting specific isolated results
#  from any of the individual internal  physics  models embedded
#  within FLUKA is not permitted. Permitted use and reproduction
#  are referred to below as "Use".
#  
#  2.
#  Modification (including translation)  of  FLUKA,  in whole or
#  in part,  is not permitted,  except for modification of FLUKA
#  User  Routines that do not  circumvent,  replace,  add to  or
#  modify any of the functions of the FLUKA core code. Permitted
#  modifications are referred to below as "Modifications".
#  
#  
#  3.
#  FLUKA is  licensed for  Use by the  Licensee  only,  and  the
#  Licensee shall not market,  distribute,  transfer, license or
#  sub-license, or in any way make available  ("Make Available")
#  FLUKA  or  Modifications,  in  whole  or  in  part,  to third
#  parties, without prior written permission. The Licensee shall
#  not assign or transfer this license.
#  
#  4.
#  Notwithstanding section 3,  the Licensee may  Make  Available
#  his Modifications  of  FLUKA User Routines  to third  parties
#  under these license conditions.
#  
#  5.
#  The  Licensee  shall  not insert FLUKA code or Modifications,
#  in whole or  in  part, into other codes without prior written
#  permission.
#  
#  6.
#  The Licensee shall not reverse engineer,  decompile, decrypt,
#  disassemble or otherwise attempt to  derive  the  source code
#  from the FLUKA binary code or FLUKA data libraries (except as
#  and only to the  extent  that  any  foregoing  restriction is
#  prohibited by Law),
#  
#  7.
#  Any use of FLUKA outside the scope of this license is subject
#  to prior written permission.
#  
#  8.
#  The Licensee  shall report as soon as practical any errors or
#  bugs found in any portion of FLUKA to fluka-discuss@fluka.org
#  
#  PUBLICATIONS AND ACKNOWLEDGEMENT
#  
#  9.
#  The Licensee shall explicitly acknowledge his use of FLUKA in
#  any publication or communication,  scientific  or  otherwise,
#  relating to such use,  by  citing the FLUKA set of references
#  (http://www.fluka.org, see below)  and  the  FLUKA  copyright
#  notice.
#  
#  10.
#  The  Licensee  shall ensure that the FLUKA set of references,
#  the  FLUKA  copyright notice and these license conditions are
#  not altered or removed from FLUKA and that all embodiments of
#  FLUKA  and  Modifications  contain  in  full the FLUKA set of
#  references,  the FLUKA  copyright  notice,  and these license
#  conditions.
#  
#  
#  11.
#  Any insertion of FLUKA code or Modifications,  in whole or in
#  part,  into other codes with permission under section 5 shall
#  preserve the  FLUKA set of references,  the  FLUKA  copyright
#  notice  and  these  license  conditions in the  FLUKA code or
#  Modifications concerned, and must also reproduce these within
#  any  additional  global  notices included  along  or embedded
#  within  the  software  into  which  the  FLUKA  code  or  the
#  Modifications have been integrated, in whole or in part.  Any
#  part of  the FLUKA code  or  Modifications so  inserted shall
#  continue to be subject to these license conditions.
#  
#  12.
#  Publication   of  any  results  of  comparisons  of  specific
#  internal physics models  extracted from FLUKA with permission
#  under  section 6  with  data or with other codes or models is
#  subject to prior written permission.
#  
#  13.
#  Contributions  to  any formal code comparisons and validation
#  exercises pertaining to FLUKA, sponsored by recognised bodies
#  or   within  the  framework  of  recognised  conferences  and
#  workshops, are subject to prior written permission.
#  WARRANTY AND LIABILITY
#  
#  14.
#  DISCLAIMER  FLUKA  IS PROVIDED BY THE FLUKA COPYRIGHT HOLDERS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
#  NOT LIMITED TO, IMPLIED  WARRANTIES  OF  MERCHANTABILITY,  OF
#  SATISFACTORY QUALITY, AND FITNESS FOR A PARTICULAR PURPOSE OR
#  USE ARE DISCLAIMED.  THE  FLUKA  COPYRIGHT  HOLDERS  AND  THE
#  AUTHORS MAKE NO REPRESENTATION THAT  FLUKA  AND MODIFICATIONS
#  THEREOF WILL NOT INFRINGE ANY PATENT, COPYRIGHT, TRADE SECRET
#  OR OTHER PROPRIETARY RIGHT.
#  
#  15.
#  LIMITATION OF LIABILITY THE  FLUKA COPYRIGHT  HOLDERS AND ANY
#  CONTRIBUTOR SHALL  HAVE  NO  LIABILITY FOR  DIRECT, INDIRECT,
#  SPECIAL,  INCIDENTAL,  CONSEQUENTIAL,  EXEMPLARY, PUNITIVE OR
#  OTHER DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION,
#  PROCUREMENT  OF  SUBSTITUTE  GOODS  OR SERVICES, LOSS OF USE,
#  DATA OR PROFITS, OR BUSINESS INTERRUPTION, HOWEVER CAUSED AND
#  ON  ANY  THEORY  OF  CONTRACT,   WARRANTY,  TORT   (INCLUDING
#  NEGLIGENCE),  PRODUCT  LIABILITY OR OTHERWISE, ARISING IN ANY
#  WAY  OUT  OF  THE  USE  OF  FLUKA,  EVEN  IF ADVISED  OF  THE
#  POSSIBILITY OF SUCH DAMAGES,  AND THE LICENSEE SHALL HOLD THE
#  COPYRIGHT HOLDERS AND ANY CONTRIBUTOR FREE  AND HARMLESS FROM
#  ANY LIABILITY, INCLUDING CLAIMS BY THIRD PARTIES, IN RELATION
#  TO SUCH USE.
#  
#  TERMINATION
#  
#  16.
#  This  license  shall  terminate  with  immediate  effect  and
#  without  notice  if  the Licensee fails to comply with any of
#  the terms of  this license,  or  if  the  Licensee  initiates
#  litigation against any of the  FLUKA Copyright Holders or any
#  contributors with regard to FLUKA.  It  shall  also terminate
#  with immediate effect from the date on which a new version of
#  FLUKA  becomes  available.  In either case sections 14 and 15
#  above shall  continue  to apply to any  Use  or Modifications
#  made under these license conditions.
#  
#  
#    FLUKA set of references, subject to change
#  
#  "The FLUKA Code: Developments and Challenges for High Energy
#   and Medical Applications" 
#  T.T. Bohlen, F. Cerutti, M.P.W. Chin, A. Fasso`, A. Ferrari,
#  P.G. Ortega, A. Mairani, P.R. Sala, G. Smirnov, and
#  V. Vlachoudis, Nuclear Data Sheets 120, 211-214 (2014)
#   
#  "FLUKA: a multi-particle transport code" 
#  A. Ferrari, P.R. Sala, A. Fasso`, and J. Ranft,
#  CERN-2005-10 (2005), INFN/TC_05/11, SLAC-R-773 
#  
#  Use of Flair must be acknowledged using the following  refer-
#  ence:
#  
#  V. Vlachoudis, Proc. Int. Conf. on Mathematics, Computational
#  Methods & Reactor Physics (M&C 2009), Saratoga Springs,
#  New York, 2009
#
# Author:	Vasilis.Vlachoudis@cern.ch
# Date:	13-Jun-2006
#       14-Dec-2010 (V.Boccone) support different architectures
#       01-Apr-2016 (V.Vlachoudis) split into subdirectories
#
#
# This makefile is divided into the following files:
#
# makefile:
#     - contains the calls to individual subdirectories defined
#       with the "SUBDIRS" variable as well the python bindings
#     - calls the config.mk, rules.mk and all the maekfile in SUBDIRS
#     - contains rules for the final so lib creation
#     - contains rules for packaging
#
# config.mk:
#     system and compiler parametrisation
#     Location: first call from all make files
#     Contains:
#        - definition of SYSTEM, THREAD, MEM, ARCH
#        - customization on individual systems
#
# rules.mk:
#     all final definitions and generic rules.mk
#     Location: after all definitions
#     Contains:
#        - definition of library names from $(NAME)
#        - definition of objects and dependencies from $(SOURCES)
#        - definition of the CXXFLAGS from the previous define choices
#        - generic compile rules
#
# (SUBDIR)/makefile:
#     individual makefile for one sub-library
#     - calls the config.mk and rules.mk
#     - Needs redefinition of the
#         $(NAME)    - library name
#         $(INCDIR)  - needed libraries
#         $(SOURCES) - by default all .cc programs in the subdirectory
#
# Executing:
#  make help	display all available commands and options
#  make -j nnn	to support multicore compiling with nnn cores
#
# In case of problem 'make -p' displays rules
#

include config.mk

# ******************************
# Installation directories
# ******************************
ifndef ROOT
	ROOT=
endif

ifndef PYX
	PYX=yes
endif

ifndef DESTDIR
	DESTDIR=/usr/local/flair
endif

# ******************************
# Variables for package creation
# ******************************
NAME      = geoviewer
TKFLAIR   = ../flair/tkFlair.py
SPEC      = flair-$(NAME).spec
VERSION  := $(shell test -f $(TKFLAIR) && grep "^__version__ *=" $(TKFLAIR)|cut -d\" -f2|cut -d- -f1)
RELEASE  := $(shell test -f $(TKFLAIR) && grep "^__version__ *=" $(TKFLAIR)|cut -d\" -f2|cut -d- -f2)
PACKAGE   = flair-$(NAME)-$(VERSION)
TGZ       = $(PACKAGE)-$(RELEASE).tgz
RPMSRC    = $(PACKAGE)-$(RELEASE).src.rpm
RPM32    := $(PACKAGE)-$(RELEASE).i386.rpm
RPM64    := $(PACKAGE)-$(RELEASE).x86_64.rpm
DEB32    := $(PACKAGE)-$(RELEASE)_i386.deb
TMPF     := $(NAME).tmp
BUILDDIR  = $(HOME)/rpmbuild
SRCDIR    = $(BUILDDIR)/SOURCES
SPECDIR   = $(BUILDDIR)/SPECS
LIBRARY   = lib$(NAME).a
SOLIB     = $(NAME).$(SO)
AUXPRGS   = usrbin2dvh

ifeq ($(PYX),yes)
	# *************
	# Python/Tcl/Tk
	# *************
	# Automatic search for paths
	# Comment in case of failure and manually insert the correct ones below
   ifeq ($(PYTHON),python3)
		PYTHON_VER = $(shell $(PYTHON)  -c 'import sys;print(sys.version[:1])')
        ifneq ($(PYTHON_VER),3)
           $(error python version 3 is needed please install it )
        endif	
   else
    PYTHON_VER = $(shell python  -c 'import sys;print(sys.version[:1])')
    ifneq ($(PYTHON_VER),3)
          PYTHON_VER = $(shell python3 -c 'import sys;print(sys.version[:1])')
         ifneq ($(PYTHON_VER),3)
            $(error python version 3 is needed please install it )
         else
	         PYTHON = python3
         endif
    else
         PYTHON = python
    endif
    endif
#CHECK AGAIN...
	PYTHON_CHECK = $(shell $(PYTHON) -c 'import sys;print(sys.version[:1])')
     ifneq ($(PYTHON_CHECK),3)
        $(error python version 3 is needed please install it or set PYTHON)
     endif	
	PYTHON_VER = $(shell $(PYTHON) -c 'import sys;print(sys.version[:5])')
    PYTHON_VER = $(shell echo $(PHYTHON_VER) | cut -f1,2 -d.)
#	PYTHON_INC = $(shell $(PYTHON) -c 'import sys;print("%s/include/python%s"%(sys.prefix,sys.version[:3]))')
	PYTHON_INC = $(shell $(PYTHON)-config --includes)
	PYTHON_LIB = $(shell $(PYTHON) -c 'import sys;print("%s/lib/python%s"%(sys.prefix,sys.version[:3]))')

	# Alternatives using python-config
	#PYTHON_INC = $(shell python-config --include)
	#PYTHON_LIB = $(shell python-config --libs)

	TKVER      = $(shell $(PYTHON) -c 'import tkinter;print (tkinter.TclVersion)')
	TCLPATH    = $(shell $(PYTHON) findpath.py tcl)
endif

# **************************
# Includes
# **************************
INCDIR  =
ifeq ($(SYSTEM),Darwin)
	ifeq ($(PYX),yes)
		INCDIR += -I$(PYTHON_INC)
		INCDIR += -I$(TCLPATH)
		INCDIR += -I/usr/X11/include
		INCDIR += -I/usr/X11R6/include
	endif
	# for fink
	INCDIR += -I/sw/include
	# for macport
#	INCDIR += -I/opt/include
	INCDIR += -I/opt/local/include

else ifeq ($(SYSTEM),ANDROID)
	# For ostream, fstream...
	INCDIR += -I$(ANDSTL)/stlport
endif

# **************************
# Libraries
# **************************
LIBDIR  = -L.

# **************************
# Sub directories
# NOTE: ORDER IS IMPORTANT FOR LINKING
# **************************
SUBDIRS = \
	optimizer \
	viewer \
	data \
	geometry \
	graph \
	math \
	utils \

INCDIR += $(foreach i,$(SUBDIRS),-I$(i))
LIBS    = -l$(NAME)
LIBS   += $(foreach i,$(SUBDIRS),-L$(i) -l$(i))
LIBDEP  = $(foreach i,$(SUBDIRS),$(i)/lib$(i).a)

# For old systems add also the X11R6 directory
# LIBDIR definition depending on the architecture
ifeq ($(PYX),yes)
	ifeq ($(TARGET),x86_64)
		ifeq ($(SYSTEM),Darwin)
			LIBDIR += -L/usr/X11R6/lib
		else
			LIBDIR += -L/usr/X11R6/lib64
		endif
	else ifeq ($(TARGET),arm64)
		ifeq ($(SYSTEM),Darwin)
#  for macport
			LIBDIR += -L/opt/local/lib
		else
			LIBDIR += -L/usr/X11R6/lib64
		endif
	else
		LIBDIR += -L/usr/X11R6/lib
	endif

	ifeq ($(OPENGL),yes)
		LIBS += -lGL -lGLU
	endif

	LIBS += -lX11 #-lXext

	ifeq ($(SYSTEM),UNIX)
		TKLIBS = -ltk$(TKVER) -ltcl$(TKVER)
	else ifeq ($(SYSTEM),CYGWIN)
		TKLIBS = -ltk -ltcl
	else ifeq ($(SYSTEM),Darwin)
		TKLIBS = -undefined dynamic_lookup
	endif
else
	PYTHONLIB = -L$(PYTHON_LIB) -lpython$(PYTHON_VER)
endif

# Process thread
#ifeq ($(THREAD),yes)
	LIBS += -lpthread
#endif

# Additional libraries
ifeq ($(SYSTEM),UNIX)
	LIBS += -lrt
else ifeq ($(SYSTEM),CYGWIN)
	LIBS += -lrt -lpython$(PYTHON_VER)
else ifeq ($(SYSTEM),Darwin)
#	LIBS += -lrt
else ifeq ($(SYSTEM),ANDROID)
	LIBDIR += -L$(ANDSTL)/libs/armeabi
	LIBS += -lstlport_static
#	LIBS += -lstlport_shared
endif
LIBS   += -lm

# **************************
# Geometry viewer sources
# **************************
SOURCES = \
	nox.cc

ifeq ($(OPENGL),yes)
SOURCES += glmesh.cc
endif

# **************************
# Python and X11 classes
# **************************
ifeq ($(PYX),yes)
SOURCES += \
	geometryobject.cc \
	geoviewer.cc \
	gmesh.cc \
	gobject.cc \
	optimizerobject.cc \
	pyutils.cc \
	viewerobject.cc \
	xdraw.cc
endif

######### COMMON MAKEFILE #########
include rules.mk

############# TARGETS  ############
all: depend $(LIBDEP) $(LIBRARY) $(SOLIB) $(AUXPRGS)
print-%  : ; @echo $* = $($*)
############ LIBRARIES ############
# Use the $(MAKE) and not the "make" command to
# allow make to know how to handle the -j
$(LIBDEP): FORCE
	$(MAKE) -C $(shell dirname $@) $(MFLAGS)

# Fake rule for forcing the call to a target
# Without forcing the generation of libraries the .so is not generated
.PHONY: FORCE
FORCE:

############# SPECIAL RULES ###############
# Files that need python as dependency
NEEDPY = \
	geometryobject.cc \
	geoviewer.cc \
	gmesh.cc \
	gobject.cc \
	optimizerobject.cc \
	pyutils.cc

$(NEEDPY:.cc=.d): $(NEEDPY)
	$(CXX) -MM $(INCDIR) -I$(PYTHON_INC) $(subst .d,.cc,$@) > $@

# Files that need python and tcl as dependencies
viewerobject.d: viewerobject.cc
	$(CXX) -MM $(INCDIR) -I$(TCLPATH) -I$(PYTHON_INC) $< > $@

# **************************
# create dependencies
# **************************
.PHONY: depend
depend: $(DEPS)

# and include them
ifneq ($(MAKECMDGOALS),clean)
-include $(DEPS)
endif

$(LIBRARY): $(LIBDEP) $(OBJECTS)
	rm -f $@
#	ar rv $@ $^
	echo "I am here"
	echo $(OBJECTS)
	ar rv $@ $(OBJECTS)
	ranlib $@

$(SOLIB): $(LIBRARY)
	$(CXX) -o $@ $(LIBDEP) $(OBJECTS) $(CXXFLAGS) $(ARCH) $(SOFLAGS) $(LDFLAGS) $(PYTHONLIB) $(TKLIBS)

# **************************
# Explicit rules
# **************************
pyutils.$(OBJ):
	$(CXX) -c $< $(CXXFLAGS) $(ARCH) $(NOALIASING) -I$(PYTHON_INC)

geoviewer.$(OBJ) geometryobject.$(OBJ) viewerobject.$(OBJ) optimizerobject.$(OBJ) gobject.$(OBJ) gmesh.$(OBJ):
	$(CXX) -c $< $(CXXFLAGS) $(ARCH) $(NOALIASING) $(TCLFLAGS) -I$(TCLPATH) -I$(PYTHON_INC)

# **************************
# Packages
# **************************
install:
	mkdir -p $(ROOT)$(DESTDIR)
	mkdir -p $(ROOT)$(DESTDIR)/fonts
	install -m 644 $(SOLIB) $(ROOT)$(DESTDIR)
	install -m 755 $(AUXPRGS) $(ROOT)$(DESTDIR)
	for f in AUTHORS BUGS ChangeLog README LICENSE; do \
		install -m 644 $$f $(ROOT)$(DESTDIR)/$$f.$(NAME); \
	done
	for f in fonts/*.tga;do \
		install -m 644 $$f $(ROOT)$(DESTDIR)/fonts; \
	done

.PHONY: spec
spec: $(SPEC)

$(SPEC): $(TKFLAIR)
	echo ",s/^Version: .*$$/Version: $(VERSION)/" > $(TMPF); \
	echo ",s/^Release: .*$$/Release: $(RELEASE)/" >> $(TMPF); \
	echo "wq" >> $(TMPF)
	ed $@ < $(TMPF)
	rm -f $(TMPF)

ChangeLog: $(SPEC)
	cp $(SPEC) $@
	echo "1,/^%changelog/d" > $(TMPF)
	echo "wq" >> $(TMPF)
	ed $@ < $(TMPF)
	rm -f $(TMPF)

tar: $(TGZ)

$(TGZ): $(SOURCES) makefile $(SPEC) ChangeLog
	mkdir $(PACKAGE)
	cp AUTHORS BUGS ChangeLog README \
	   makefile config.mk rules.mk \
	   findpath.py \
	   *.h *.cc *.spec $(PACKAGE)/
	for d in $(SUBDIRS); do mkdir $(PACKAGE)/$$d; cp $$d/*.h $$d/*.cc $$d/makefile $(PACKAGE)/$$d;done
	mkdir $(PACKAGE)/fonts
	cp fonts/*.tga $(PACKAGE)/fonts/
	tar czvf $(TGZ) $(PACKAGE)/
	rm -Rf $(PACKAGE)
	chmod +r $@

# ********************************************
# Prepare RPMs and deb packages (if in Linux)
# ********************************************
ifeq ($(SYSTEM),UNIX)
$(RPMSRC): $(TGZ) $(SPEC)
	cp $(TGZ) $(SRCDIR)/
	cp $(SPEC) $(SPECDIR)/
	rpmbuild -bs $(SPEC)
	cp $(BUILDDIR)/SRPMS/$(RPMSRC) .
	chmod +r $@

$(RPM32): $(RPMSRC)
	rpmbuild --rebuild --target=i386 $(RPMSRC)
	cp $(BUILDDIR)/RPMS/i386/$(RPM32) .
	chmod +r $@

$(RPM64): $(RPMSRC)
	rpmbuild --rebuild --target=x86_64 $(RPMSRC)
	cp $(BUILDDIR)/RPMS/x86_64/$(RPM64) .
	chmod +r $@

.PHONY: rpmsrc
rpmsrc: $(RPMSRC)

.PHONY: rpm32
rpm32: $(RPM32)

.PHONY: rpm64
rpm64: $(RPM64)

.PHONY: rpm
rpm: rpm32 rpm64

$(DEB32): $(RPM32)
	fakeroot alien --to-deb  --scripts --keep-version --verbose $(RPM32)

.PHONY: deb
deb: $(DEB32)
endif

.PHONY: clean
clean:
	rm -f $(AUXPRGS) *.$(OBJ) $(LIBRARY) geoview core core.* $(SOLIB) $(X11) $(DEPS)
	for d in ${SUBDIRS}; do $(MAKE) -C $$d clean;done

.PHONY: distclean
distclean: clean
	rm -f $(RPM32) $(RPM64) $(DEB32) $(RPMSRC) $(TGZ) tags

.PHONY: tags
tags: $(SOURCES)
	ctags *.h *.cc $(foreach i,$(SUBDIRS),$(i)/*.h $(i)/*.cc)

.PHONY: android
android:
	$(MAKE) -j TARGET=android

.PHONY: 32
32:
	$(MAKE) -j TARGET=i386

.PHONY: 64
64:
	$(MAKE) -j TARGET=x86_64

.PHONY: clang
clang:
	$(MAKE) -j COMP=clang

.PHONY: debug
debug:
	$(MAKE) -j DEBUG=yes

.PHONY: dump
dump:
	$(MAKE) -j DEBUG=yes DUMP=yes

.PHONY: stat
stat:
	$(MAKE) -j STAT=yes

# **************************
# Display help
# **************************
help:
	@echo
	@echo "flair V1 makefile"
	@echo
	@echo "Targets:"
	@echo "  <nothing>        compile library on default architecture"
	@echo "  32               build a 32bit version (make TARGET=i386)"
	@echo "  64               build a 64bit version (make TARGET=x86_64)"
	@echo "  android          build an android version (make TARGET=android)"
	@echo "  clean            clean up everything"
	@echo "  clang            compile with clang"
	@echo "  deb              create a debian archive"
	@echo "  debug            create with DEBUG=yes"
	@echo "  dump             create with DEBUG=yes DUMP=yes"
	@echo "  stat             create with STAT=yes"
	@echo "  distclean        clean up distribution files"
	@echo "  doc              create documentation"
	@echo "  help             print this screen"
	@echo "  install          to install in DESTDIR"
	@echo "  rpm              create a rpm archive"
	@echo "  tags             generates tags file"
	@echo "  tar              create a tar-gz archive"
	@echo "  <target>         compile target.cc as target executable"
	@echo
	@echo "Options:"
	@echo "  COMP=[clang|c++] compiler choice (Default c++)"
	@echo "  DEBUG=[no|yes]   to enable debugging options (Default no)"
	@echo "  DESTDIR=[path]   where to install (Default /usr/local/flair)"
	@echo "  DUMP=[no|yes]    enable extra printout information (Default no)"
	@echo "  EXP=[no|yes]     enable experimental unstable features (Default no)"
	@echo "  MEM=[yes|no]     include memory checking libraries (Default no)"
	@echo "  OPENGL=[yes|no]  include opengl WARNING experimental (Default no)"
	@echo "  PROFILE=[no|yes] compile with profiling information (Default no)"
	@echo "  PYX=[yes|no]     include python and X11 modules into shared library (Default yes)"
	@echo "  ROOT=[path]      root directory for using standard installation (Default /)"
	@echo "  STAT=[no|yes]    print out statistics information (Default no)"
	@echo "  TARGET=i386|i686|x86_64|android"
	@echo "                   architecture to compile for (Default system depended)"
	@echo "  THREAD=[yes|no]  compile as threaded application (Default yes)"
	@echo
	@echo "Systems and compiler supported:"
	@echo "  Linux            g++, clang++"
	@echo "  Mac OS/X         g++"
	@echo "  Windows          cygwin g++"
	@echo
	@echo "Example:"
	@echo "  To compile the python geoviewer.so library"
	@echo "    make"
	@echo "  To install the library in the directory /usr/local/flair where flair is located"
	@echo "    make install"
	@echo "  To compile with clang++ and debugging information"
	@echo "    make COMP=clang DEBUG=yes"
	@echo "  To compile in parallel using 8 cores"
	@echo "    make -j 8"
	@echo
	@echo "author: Vasilis.Vlachoudis@cern.ch"
	@echo
